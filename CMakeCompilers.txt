include(CheckCXXCompilerFlag)

if (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
    set (X86 TRUE)
    message(STATUS "Detected x86 arch")
else()
    set (X86 FALSE)
    if (CMAKE_SYSTEM_PROCESSOR MATCHES "(arm)|(ARM)|(arm64)|(ARM64)")
        set (ARM TRUE)
        message(STATUS "Detected ARM arch")
    else()
        set (ARM FALSE)
        message(FATAL_ERROR "Unknown arch")
    endif()
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")

if (X86)
    check_cxx_source_compiles("#include <immintrin.h>\nint main() { __m512i avx_2p  = _mm512_set1_epi16(16 << 1); __m512i avx_t0  = _mm512_add_epi16(avx_2p, avx_2p); return 0;}" NFLLIB_USE_AVX512)
    check_cxx_source_compiles("#include <immintrin.h>\nint main() { return 0;}" NFLLIB_USE_AVX)
    check_cxx_source_compiles("#include <pmmintrin.h>\nint main() { return 0;}" NFLLIB_USE_SSE)
elseif (ARM)
    check_cxx_source_compiles("#include <arm_neon.h>\nint main() { return 0;}" NFLLIB_USE_NEON)
endif()

if(NFLLIB_USE_AVX512)
  message(STATUS "Using AVX512 vector engine")
  add_definitions(-DNTT_AVX512)
  add_definitions(-DNFL_OPTIMIZED)
elseif(NFLLIB_USE_AVX)
  message(STATUS "Using AVX vector engine")
  add_definitions(-DNTT_AVX2)
  add_definitions(-DNFL_OPTIMIZED)
elseif(NFLLIB_USE_SSE)
  message(STATUS "Using SSE vector engine")
  add_definitions(-DNTT_SSE)
  add_definitions(-DNFL_OPTIMIZED)
elseif(NFLLIB_USE_NEON)
  message(STATUS "Using NEON vector engine")
  add_definitions(-DNTT_NEON)
  add_definitions(-DNFL_OPTIMIZED)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfpu=neon -ftree-vectorize -flax-vector-conversions")
endif()

# C++11 support
CHECK_CXX_COMPILER_FLAG(-std=c++11 COMPILER_SUPPORTS_CXX11)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
else()
    CHECK_CXX_COMPILER_FLAG(-std=c++0x COMPILER_SUPPORTS_CXX0X)
    if(COMPILER_SUPPORTS_CXX0X)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
    endif()
endif()

# optimization flags support
if(CMAKE_BUILD_TYPE MATCHES Release)
	set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O3 -g3")
	foreach(FLAG -march=native -mtune=native -funroll-loops)
		string(REGEX REPLACE -= _ FLAG_ID ${FLAG})
		string(TOUPPER ${FLAG_ID} FLAG_ID)
		CHECK_CXX_COMPILER_FLAG(${FLAG} COMPILER_SUPPORTS${FLAG_ID})
	    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${FLAG}")
	endforeach()
else()
    add_definitions(-DCHECK_STRICTMOD)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
endif()

if(APPLE)
   set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wa,-q")
endif()


